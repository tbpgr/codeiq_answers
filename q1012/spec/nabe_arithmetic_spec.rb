# encoding: utf-8
require "spec_helper"
require "nabe_arithmetic"

describe NabeArithmetic do
  context :detect_bases_size do
    cases = [
      {
        case_no: 1,
        case_title: "size 1 start [1] add [1]",
        input: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],
        expected: 1,
      },
      {
        case_no: 2,
        case_title: "size 3 start [1,2,100] add [0,0,1]",
        input: [1,2,100,1,2,101,1,2,102,1,2,103,1,2,104,1,2,105,1,2,106,1,2,107,1,2,108,1,2,109,1,2,110,1,2,111,1,2,112],
        expected: 3,
      },
      {
        case_no: 3,
        case_title: "size 4 start [1,1,7,1] add [0,0,0,0]",
        input: [1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7],
        expected: 4,
      },
      {
        case_no: 4,
        case_title: "size 4 start [4,3,2,1] add [2,3,4,5]",
        input: [4,3,2,1,6,6,6,6,8,9,10,11,10,12,14,16,12,15,18,21,14,18,22,26,16,21,26,31,18,24,30,36,20,27,34,41,22],
        expected: 4,
      },
    ]
    cases.each do |c|
      it "|case_no=#{c[:case_no]}|case_title=#{c[:case_title]}" do
        begin
          case_before c

          # -- given --
          nabe_arithmetic = NabeArithmetic.new

          # -- when --
          actual = nabe_arithmetic.detect_bases_size(c[:input])

          # -- then --
          expect(actual).to eq(c[:expected])
        ensure
          case_after c
        end
      end

      def case_before(c)
        # implement each case before
      end

      def case_after(c)
        # implement each case after
      end
    end
  end

  context :sequence do
    cases = [
      {
        case_no: 1,
        case_title: "T01",
        input: [1,2,100,1,2,101,1,2,102,1,2,103,1,2,104,1,2,105,1,2,106,1,2,107,1,2,108,1,2,109,1,2,110,1,2,111,1,2,112],
        expected: [1,2,100,1,2,101,1,2,102,1,2,103,1,2,104,1,2,105,1,2,106,1,2,107,1,2,108,1,2,109,1,2,110,1,2,111,1,2,112]
      },
      {
        case_no: 2,
        case_title: "T02",
        input: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],
        expected: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]
      },
      {
        case_no: 3,
        case_title: "T03",
        input: [1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7],
        expected: [1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7]
      },
      {
        case_no: 4,
        case_title: "T04",
        input: [1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2],
        expected: [1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2]
      },
      {
        case_no: 5,
        case_title: "T05",
        input: [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
        expected: [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]
      },
      {
        case_no: 6,
        case_title: "T06",
        input: [3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3],
        expected: [3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3]
      },
      {
        case_no: 7,
        case_title: "T07",
        input: [3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4],
        expected: [3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4]
      },
      {
        case_no: 8,
        case_title: "T08",
        input: [3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4],
        expected: [3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4]
      },
      {
        case_no: 9,
        case_title: "T09",
        input: [3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3],
        expected: [3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3]
      },
      {
        case_no: 10,
        case_title: "T10",
        input: [3,1,4,1,5,9,3,1,4,1,5,9,3,1,4,1,5,9,3,1,4,1,5,9,3,1,4,1,5,9,3,1,4,1,5,9,3,1,4,1,5,9,3,1,4,1,5,9,3,1,4],
        expected: [3,1,4,1,5,9,3,1,4,1,5,9,3,1,4,1,5,9,3,1,4,1,5,9,3,1,4,1,5,9,3,1,4,1,5,9,3,1,4,1,5,9,3,1,4,1,5,9,3,1,4]
      },
      {
        case_no: 11,
        case_title: "T11",
        input: [3,1,4,1,5,9,2,3,1,4,1,5,9,2,3,1,4,1,5,9,2,3,1,4,1,5,9,2,3,1,4,1,5,9,2,3,1,4,1,5,9,2,3,1,4,1,5,9,2,3,1],
        expected: [3,1,4,1,5,9,2,3,1,4,1,5,9,2,3,1,4,1,5,9,2,3,1,4,1,5,9,2,3,1,4,1,5,9,2,3,1,4,1,5,9,2,3,1,4,1,5,9,2,3,1]
      },
      {
        case_no: 12,
        case_title: "T12",
        input: [3,1,4,1,5,9,2,6,3,1,4,1,5,9,2,6,3,1,4,1,5,9,2,6,3,1,4,1,5,9,2,6,3,1,4,1,5,9,2,6,3,1,4,1,5,9,2,6,3,1,4],
        expected: [3,1,4,1,5,9,2,6,3,1,4,1,5,9,2,6,3,1,4,1,5,9,2,6,3,1,4,1,5,9,2,6,3,1,4,1,5,9,2,6,3,1,4,1,5,9,2,6,3,1,4]
      },
      {
        case_no: 13,
        case_title: "T13",
        input: [3,1,4,1,5,9,2,6,5,3,4,1,5,9,2,6,7,5,4,1,5,9,2,6,9,7,4,1,5,9,2,6,11,9,4,1,5,9,2,6,13,11,4,1,5,9,2,6,15],
        expected: [3,1,4,1,5,9,2,6,5,3,4,1,5,9,2,6,7,5,4,1,5,9,2,6,9,7,4,1,5,9,2,6,11,9,4,1,5,9,2,6,13,11,4,1,5,9,2,6,15]
      },
      {
        case_no: 14,
        case_title: "T14",
        input: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],
        expected: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37]
      },
      {
        case_no: 15,
        case_title: "T15",
        input: [10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76],
        expected: [10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76]
      },
      {
        case_no: 16,
        case_title: "T16",
        input: [1,8,15,22,29,36,43,50,57,64,71,78,85,92,99,106,113,120,127,134,141,148,155,162,169,176,183,190,197,204],
        expected: [1,8,15,22,29,36,43,50,57,64,71,78,85,92,99,106,113,120,127,134,141,148,155,162,169,176,183,190,197,204]
      },
      {
        case_no: 17,
        case_title: "T17",
        input: [1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,107,1,108,1,109,1,110,1,111,1,112,1,113,1,114,1,115,1,116],
        expected: [1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,107,1,108,1,109,1,110,1,111,1,112,1,113,1,114,1,115,1,116]
      },
      {
        case_no: 18,
        case_title: "T18",
        input: [1,2,7,1,2,14,1,2,21,1,2,28,1,2,35,1,2,42,1,2,49,1,2,56,1,2,63,1,2,70,1,2,77,1,2,84,1,2,91,1,2,98,1,2],
        expected: [1,2,7,1,2,14,1,2,21,1,2,28,1,2,35,1,2,42,1,2,49,1,2,56,1,2,63,1,2,70,1,2,77,1,2,84,1,2,91,1,2,98,1,2]
      },
      {
        case_no: 19,
        case_title: "T19",
        input: [1,1,7,1,1,8,1,1,10,1,1,7,1,1,8,1,1,10,1,1,7,1,1,8,1,1,10,1,1,7,1,1,8,1,1,10,1,1,7,1,1,8,1,1,10,1,1,7],
        expected: [1,1,7,1,1,8,1,1,10,1,1,7,1,1,8,1,1,10,1,1,7,1,1,8,1,1,10,1,1,7,1,1,8,1,1,10,1,1,7,1,1,8,1,1,10,1,1,7]
      },
      {
        case_no: 20,
        case_title: "T20",
        input: [1,1,7,1,1,8,1,1,9,1,1,10,1,1,11,1,1,12,1,1,13,1,1,14,1,1,15,1,1,16,1,1,17,1,1,18,1,1,19,1,1,20,1,1,21],
        expected: [1,1,7,1,1,8,1,1,9,1,1,10,1,1,11,1,1,12,1,1,13,1,1,14,1,1,15,1,1,16,1,1,17,1,1,18,1,1,19,1,1,20,1,1,21]
      },
      {
        case_no: 21,
        case_title: "T21",
        input: [1,1,7,1,1,8,1,1,9,1,1,8,1,1,11,1,1,8,1,1,13,1,1,8,1,1,15,1,1,8,1,1,17,1,1,8,1,1,19,1,1,8,1,1,21,1,1,8],
        expected: [1,1,7,1,1,8,1,1,9,1,1,8,1,1,11,1,1,8,1,1,13,1,1,8,1,1,15,1,1,8,1,1,17,1,1,8,1,1,19,1,1,8,1,1,21,1,1,8]
      },
      {
        case_no: 22,
        case_title: "T22",
        input: [1,2,3,1,1,2,3,2,1,2,3,3,1,2,3,4,1,2,3,5,1,2,3,6,1,2,3,7,1,2,3,8,1,2,3,9,1,2,3,10,1,2,3,11,1,2,3,12,1],
        expected: [1,2,3,1,1,2,3,2,1,2,3,3,1,2,3,4,1,2,3,5,1,2,3,6,1,2,3,7,1,2,3,8,1,2,3,9,1,2,3,10,1,2,3,11,1,2,3,12,1]
      },
      {
        case_no: 23,
        case_title: "T23",
        input: [1,2,3,4,100,2,3,4,5,100,3,4,5,6,100,4,5,6,7,100,5,6,7,8,100,6,7,8,9,100,7,8,9,10,100,8,9,10,11,100,9],
        expected: [1,2,3,4,100,2,3,4,5,100,3,4,5,6,100,4,5,6,7,100,5,6,7,8,100,6,7,8,9,100,7,8,9,10,100,8,9,10,11,100,9]
      },
      {
        case_no: 24,
        case_title: "T24",
        input: [1,2,3,4,5,2,4,6,8,10,3,6,9,12,15,4,8,12,16,20,5,10,15,20,25,6,12,18,24,30,7,14,21,28,35,8,16,24,32,40],
        expected: [1,2,3,4,5,2,4,6,8,10,3,6,9,12,15,4,8,12,16,20,5,10,15,20,25,6,12,18,24,30,7,14,21,28,35,8,16,24,32,40]
      },
      {
        case_no: 25,
        case_title: "T25",
        input: [1,2,3,4,5,6,6,6,6,6,6,6,11,10,9,8,7,6,16,14,12,10,8,6,21,18,15,12,9,6,26,22,18,14,10,6,31,26,21,16,11],
        expected: [1,2,3,4,5,6,6,6,6,6,6,6,11,10,9,8,7,6,16,14,12,10,8,6,21,18,15,12,9,6,26,22,18,14,10,6,31,26,21,16,11]
      },
      {
        case_no: 26,
        case_title: "T26",
        input: [4,3,2,1,6,6,6,6,8,9,10,11,10,12,14,16,12,15,18,21,14,18,22,26,16,21,26,31,18,24,30,36,20,27,34,41,22],
        expected: [4,3,2,1,6,6,6,6,8,9,10,11,10,12,14,16,12,15,18,21,14,18,22,26,16,21,26,31,18,24,30,36,20,27,34,41,22]
      },
      {
        case_no: 27,
        case_title: "T27",
        input: [1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,15,1,1,1,1,1,1,22,1,1,1,1,1,1,29,1,1,1,1,1,1,36,1,1,1,1,1,1,43],
        expected: [1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,15,1,1,1,1,1,1,22,1,1,1,1,1,1,29,1,1,1,1,1,1,36,1,1,1,1,1,1,43]
      },
      {
        case_no: 28,
        case_title: "T28",
        input: [1,1,2,1,1,2,1,1,2,1,1,3,1,1,4,1,1,5,1,1,4,1,1,6,1,1,8,1,1,5,1,1,8,1,1,11,1,1,6,1,1,10,1,1,14,1,1,7,1],
        expected: [1,1,2,1,1,2,1,1,2,1,1,3,1,1,4,1,1,5,1,1,4,1,1,6,1,1,8,1,1,5,1,1,8,1,1,11,1,1,6,1,1,10,1,1,14,1,1,7,1]
      },
      {
        case_no: 29,
        case_title: "T29",
        input: [1,2,3,1,2,3,1,2,3,1,2,4,1,2,5,1,2,6,1,2,5,1,2,7,1,2,9,1,2,6,1,2,9,1,2,12,1,2,7,1,2,11,1,2,15,1,2,8,1],
        expected: [1,2,3,1,2,3,1,2,3,1,2,4,1,2,5,1,2,6,1,2,5,1,2,7,1,2,9,1,2,6,1,2,9,1,2,12,1,2,7,1,2,11,1,2,15,1,2,8,1]
      },
      {
        case_no: 30,
        case_title: "T30",
        input: [35,31,7,30,35,12,35,31,7,30,35,12,35,31,7,30,35,12,35,31,7,30,35,12,35,31,7,30,35,12,35,31,7,30,35,12],
        expected: [35,31,7,30,35,12,35,31,7,30,35,12,35,31,7,30,35,12,35,31,7,30,35,12,35,31,7,30,35,12,35,31,7,30,35,12]
      }
    ]

    cases.each do |c|
      it "|case_no=#{c[:case_no]}|case_title=#{c[:case_title]}" do
        begin
          case_before c

          # -- given --
          nabe_arithmetic = NabeArithmetic.new
          nn_size = nabe_arithmetic.detect_bases_size(c[:input])
          bases = c[:input][0, nn_size]
          nexts = c[:input][nn_size, nn_size]
          adds = []
          bases.size.times { |i|adds<<nexts[i] - bases[i] }
          cnt = nabe_arithmetic.repeat_count(bases, c[:input].size)

          # -- when --
          actual = nabe_arithmetic.sequence(cnt, bases, adds)

          # -- then --
          expect(actual[0, (c[:input].size)]).to eq(c[:expected])
        ensure
          case_after c
        end
      end

      def case_before(c)
        # implement each case before
      end

      def case_after(c)
        # implement each case after
      end
    end
  end

  context :sum do
    cases = [
      {
        case_no: 1,
        case_title: "T01",
        input: [1,2,100,1,2,101,1,2,102,1,2,103,1,2,104,1,2,105,1,2,106,1,2,107,1,2,108,1,2,109,1,2,110,1,2,111,1,2,112],
        from: 100,
        to: 110,
        expected: 414
      },
      {
        case_no: 2,
        case_title: "T02",
        input: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],
        from: 1,
        to: 1,
        expected: 1
      },
      {
        case_no: 3,
        case_title: "T03",
        input: [1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7,1,1,1,7],
        from: 100,
        to: 100,
        expected: 1
      },
      {
        case_no: 4,
        case_title: "T04",
        input: [1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2,3,1,1,2],
        from: 58,
        to: 171,
        expected: 199
      },
      {
        case_no: 5,
        case_title: "T05",
        input: [3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3],
        from: 40,
        to: 192,
        expected: 459
      },
      {
        case_no: 6,
        case_title: "T06",
        input: [3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3],
        from: 7,
        to: 178,
        expected: 344
      },
      {
        case_no: 7,
        case_title: "T07",
        input: [3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4,3,1,4],
        from: 15,
        to: 106,
        expected: 247
      },
      {
        case_no: 8,
        case_title: "T08",
        input: [3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4,1,3,1,4],
        from: 98,
        to: 192,
        expected: 213
      },
      {
        case_no: 9,
        case_title: "T09",
        input: [3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3,1,4,1,5,3],
        from: 70,
        to: 192,
        expected: 345
      },
      {
        case_no: 10,
        case_title: "T10",
        input: [3,1,4,1,5,9,3,1,4,1,5,9,3,1,4,1,5,9,3,1,4,1,5,9,3,1,4,1,5,9,3,1,4,1,5,9,3,1,4,1,5,9,3,1,4,1,5,9,3,1,4],
        from: 54,
        to: 158,
        expected: 404
      },
      {
        case_no: 11,
        case_title: "T11",
        input: [3,1,4,1,5,9,2,3,1,4,1,5,9,2,3,1,4,1,5,9,2,3,1,4,1,5,9,2,3,1,4,1,5,9,2,3,1,4,1,5,9,2,3,1,4,1,5,9,2,3,1],
        from: 12,
        to: 198,
        expected: 670
      },
      {
        case_no: 12,
        case_title: "T12",
        input: [3,1,4,1,5,9,2,6,3,1,4,1,5,9,2,6,3,1,4,1,5,9,2,6,3,1,4,1,5,9,2,6,3,1,4,1,5,9,2,6,3,1,4,1,5,9,2,6,3,1,4],
        from: 84,
        to: 162,
        expected: 306
      },
      {
        case_no: 13,
        case_title: "T13",
        input: [3,1,4,1,5,9,2,6,5,3,4,1,5,9,2,6,7,5,4,1,5,9,2,6,9,7,4,1,5,9,2,6,11,9,4,1,5,9,2,6,13,11,4,1,5,9,2,6,15],
        from: 11,
        to: 122,
        expected: 910
      },
      {
        case_no: 14,
        case_title: "T14",
        input: [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],
        from: 47,
        to: 116,
        expected: 5705
      },
      {
        case_no: 15,
        case_title: "T15",
        input: [10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76],
        from: 44,
        to: 141,
        expected: 18914
      },
      {
        case_no: 16,
        case_title: "T16",
        input: [1,8,15,22,29,36,43,50,57,64,71,78,85,92,99,106,113,120,127,134,141,148,155,162,169,176,183,190,197,204],
        from: 37,
        to: 125,
        expected: 49929
      },
      {
        case_no: 17,
        case_title: "T17",
        input: [1,100,1,101,1,102,1,103,1,104,1,105,1,106,1,107,1,108,1,109,1,110,1,111,1,112,1,113,1,114,1,115,1,116],
        from: 74,
        to: 180,
        expected: 8828
      },
      {
        case_no: 18,
        case_title: "T18",
        input: [1,2,7,1,2,14,1,2,21,1,2,28,1,2,35,1,2,42,1,2,49,1,2,56,1,2,63,1,2,70,1,2,77,1,2,84,1,2,91,1,2,98,1,2],
        from: 11,
        to: 161,
        expected: 10127
      },
      {
        case_no: 19,
        case_title: "T19",
        input: [1,1,7,1,1,8,1,1,10,1,1,7,1,1,8,1,1,10,1,1,7,1,1,8,1,1,10,1,1,7,1,1,8,1,1,10,1,1,7,1,1,8,1,1,10,1,1,7],
        from: 42,
        to: 129,
        expected: 308
      },
      {
        case_no: 20,
        case_title: "T20",
        input: [1,1,7,1,1,8,1,1,9,1,1,10,1,1,11,1,1,12,1,1,13,1,1,14,1,1,15,1,1,16,1,1,17,1,1,18,1,1,19,1,1,20,1,1,21],
        from: 1,
        to: 178,
        expected: 2243
      },
      {
        case_no: 21,
        case_title: "T21",
        input: [1,1,7,1,1,8,1,1,9,1,1,8,1,1,11,1,1,8,1,1,13,1,1,8,1,1,15,1,1,8,1,1,17,1,1,8,1,1,19,1,1,8,1,1,21,1,1,8],
        from: 68,
        to: 181,
        expected: 1121
      },
      {
        case_no: 22,
        case_title: "T22",
        input: [1,2,3,1,1,2,3,2,1,2,3,3,1,2,3,4,1,2,3,5,1,2,3,6,1,2,3,7,1,2,3,8,1,2,3,9,1,2,3,10,1,2,3,11,1,2,3,12,1],
        from: 76,
        to: 115,
        expected: 295
      },
      {
        case_no: 23,
        case_title: "T23",
        input: [1,2,3,4,100,2,3,4,5,100,3,4,5,6,100,4,5,6,7,100,5,6,7,8,100,6,7,8,9,100,7,8,9,10,100,8,9,10,11,100,9],
        from: 29,
        to: 125,
        expected: 3339
      },
      {
        case_no: 24,
        case_title: "T24",
        input: [1,2,3,4,5,2,4,6,8,10,3,6,9,12,15,4,8,12,16,20,5,10,15,20,25,6,12,18,24,30,7,14,21,28,35,8,16,24,32,40],
        from: 46,
        to: 130,
        expected: 4590
      },
      {
        case_no: 25,
        case_title: "T25",
        input: [1,2,3,4,5,6,6,6,6,6,6,6,11,10,9,8,7,6,16,14,12,10,8,6,21,18,15,12,9,6,26,22,18,14,10,6,31,26,21,16,11],
        from: 10,
        to: 125,
        expected: 3546
      },
      {
        case_no: 26,
        case_title: "T26",
        input: [4,3,2,1,6,6,6,6,8,9,10,11,10,12,14,16,12,15,18,21,14,18,22,26,16,21,26,31,18,24,30,36,20,27,34,41,22],
        from: 99,
        to: 166,
        expected: 7871
      },
      {
        case_no: 27,
        case_title: "T27",
        input: [1,1,1,1,1,1,1,1,1,1,1,1,1,8,1,1,1,1,1,1,15,1,1,1,1,1,1,22,1,1,1,1,1,1,29,1,1,1,1,1,1,36,1,1,1,1,1,1,43],
        from: 4,
        to: 141,
        expected: 1468
      },
      {
        case_no: 28,
        case_title: "T28",
        input: [1,1,2,1,1,2,1,1,2,1,1,3,1,1,4,1,1,5,1,1,4,1,1,6,1,1,8,1,1,5,1,1,8,1,1,11,1,1,6,1,1,10,1,1,14,1,1,7,1],
        from: 64,
        to: 196,
        expected: 1374
      },
      {
        case_no: 29,
        case_title: "T29",
        input: [1,2,3,1,2,3,1,2,3,1,2,4,1,2,5,1,2,6,1,2,5,1,2,7,1,2,9,1,2,6,1,2,9,1,2,12,1,2,7,1,2,11,1,2,15,1,2,8,1],
        from: 17,
        to: 156,
        expected: 1111
      },
      {
        case_no: 30,
        case_title: "T30",
        input: [35,31,7,30,35,12,35,31,7,30,35,12,35,31,7,30,35,12,35,31,7,30,35,12,35,31,7,30,35,12,35,31,7,30,35,12],
        from: 65,
        to: 148,
        expected: 2100
      }
    ]

    cases.each do |c|
      it "|case_no=#{c[:case_no]}|case_title=#{c[:case_title]}" do
        begin
          case_before c

          # -- given --
          nabe_arithmetic = NabeArithmetic.new
          nn_size = nabe_arithmetic.detect_bases_size(c[:input])
          bases = c[:input][0, nn_size]
          nexts = c[:input][nn_size, nn_size]
          adds = []
          bases.size.times { |i|adds<<nexts[i] - bases[i] }
          cnt = nabe_arithmetic.repeat_count(bases, c[:to])
          sequence = nabe_arithmetic.sequence(cnt, bases, adds)

          # -- when --
          actual = nabe_arithmetic.sum(sequence, c[:from] - 1, c[:to] - c[:from] + 1)

          # -- then --
          expect(actual).to eq(c[:expected])
        ensure
          case_after c
        end
      end

      def case_before(c)
        # implement each case before
      end

      def case_after(c)
        # implement each case after
      end
    end
  end
end
